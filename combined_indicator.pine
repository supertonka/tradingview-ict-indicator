//@version=6



indicator("Combined OB & MW Patterns", overlay=true, max_boxes_count=500, max_labels_count=500, max_lines_count=500)

// ==================
// Input Parameters
// ==================

// EMA Parameters
emaLength = input.int(20, "EMA Length", minval=1)



emaPipDistance = input.float(15.0, "OB Distance from EMA (pips)", minval=1.0)

// Original OrderBlock Parameters
obLength = input.int(5, 'Volume Pivot Length', minval = 1)
bullExtLast = input.int(3, 'Bullish OB ', minval = 1, inline = 'bull')
bgBullCss = input.color(color.new(#169400, 80), '', inline = 'bull')
bullCss = input.color(#169400, '', inline = 'bull')
bullAvgCss = input.color(color.new(#9598a1, 37), '', inline = 'bull')
bearExtLast = input.int(3, 'Bearish OB', minval = 1, inline = 'bear')
bgBearCss = input.color(color.new(#ff1100, 80), '', inline = 'bear')
bearCss = input.color(#ff1100, '', inline = 'bear')





bearAvgCss = input.color(color.new(#9598a1, 37), '', inline = 'bear')

// Original M-W Pattern Parameters
length = input.int(10, step=5, minval=5)
showZigzag = input.bool(false, "Show Zigzag")
showPivots = input.bool(true, "Show Pivots")
showStats = input.bool(true, "Show Stats")
bullishColor = input.color(color.green)
bullTrapColor = input.color(color.orange)
bearishColor = input.color(color.red)
bearTrapColor = input.color(color.lime)
textColor = input.color(color.black)
MaxRiskPerReward = input.int(30, step=5, minval=5, maxval=100)


DisplayRiskPerReward = input.bool(true)

// ==================
// Original OrderBlock Code
// ==================

get_line_style(style) =>
    out = switch style
        '⎯⎯⎯'  => line.style_solid
        '----' => line.style_dashed
        '····' => line.style_dotted

get_coordinates(condition, top, btm, ob_val)=>
    var ob_top  = array.new_float(0)
    var ob_btm  = array.new_float(0)
    var ob_avg  = array.new_float(0)
    var ob_left = array.new_int(0)

    float ob = na

    if condition
        avg = math.avg(top, btm)
        
        array.unshift(ob_top, top)
        array.unshift(ob_btm, btm)
        array.unshift(ob_avg, avg)
        array.unshift(ob_left, time[obLength])
        
        ob := ob_val
    
    [ob_top, ob_btm, ob_avg, ob_left, ob]

remove_mitigated(ob_top, ob_btm, ob_left, ob_avg, target, bull)=>
    mitigated = false
    target_array = bull ? ob_btm : ob_top

    for element in target_array
        idx = array.indexof(target_array, element)

        if (bull ? target < element : target > element)
            mitigated := true

            array.remove(ob_top, idx)
            array.remove(ob_btm, idx)
            array.remove(ob_avg, idx)
            array.remove(ob_left, idx)
    
    mitigated

set_order_blocks(ob_top, ob_btm, ob_left, ob_avg, ext_last, bg_css, border_css, lvl_css)=>
    var ob_box = array.new_box(0)
    var ob_lvl = array.new_line(0)

    if barstate.isfirst
        for i = 0 to ext_last-1
            array.unshift(ob_box, box.new(na,na,na,na
              , xloc = xloc.bar_time
              , extend= extend.right
              , bgcolor = bg_css
              , border_color = color.new(border_css, 70)))

            array.unshift(ob_lvl, line.new(na,na,na,na
              , xloc = xloc.bar_time
              , extend = extend.right
              , color = lvl_css
              , style = get_line_style('⎯⎯⎯')
              , width = 1))

    if barstate.islast
        if array.size(ob_top) > 0
            for i = 0 to math.min(ext_last-1, array.size(ob_top)-1)
                get_box = array.get(ob_box, i)
                get_lvl = array.get(ob_lvl, i)

                box.set_lefttop(get_box, array.get(ob_left, i), array.get(ob_top, i))
                box.set_rightbottom(get_box, array.get(ob_left, i), array.get(ob_btm, i))

                line.set_xy1(get_lvl, array.get(ob_left, i), array.get(ob_avg, i))
                line.set_xy2(get_lvl, array.get(ob_left, i)+1, array.get(ob_avg, i))

// ==================
// Original M-W Pattern Code
// ==================

var zigzagvalues = array.new_float(0)
var zigzagindexes = array.new_int(0)
var zigzagdir = array.new_int(0)

var doubleTopBottomValues = array.new_float(3)
var doubleTopBottomIndexes = array.new_int(3)
var doubleTopBottomDir = array.new_int(3)

int max_array_size = 10

pivots(length)=>
    float ph = ta.highestbars(high, length) == 0 ? high : na
    float pl = ta.lowestbars(low, length) == 0 ? low : na
    dir = 0
    dir := not na(ph) and na(pl) ? 1 : not na(pl) and na(ph) ? -1 : dir[1]
    [dir, ph, pl]

add_to_array(value, index, dir)=>
    mult = array.size(zigzagvalues) < 2? 1 : 
                 (dir*value > dir*array.get(zigzagvalues,1))? 2 : 1
    array.unshift(zigzagindexes, index)
    array.unshift(zigzagvalues, value)
    array.unshift(zigzagdir, dir*mult)
    if array.size(zigzagindexes) > max_array_size
        array.pop(zigzagindexes)
        array.pop(zigzagvalues)
        array.pop(zigzagdir)

add_to_zigzag(dir, dirchanged, ph, pl, index)=>
    value = (dir == 1? ph : pl)
    if array.size(zigzagvalues) == 0 or dirchanged != 0
        add_to_array(value, index, dir)
    else if(dir == 1 and value > array.get(zigzagvalues, 0)) or (dir == -1 and value < array.get(zigzagvalues, 0))
        array.shift(zigzagvalues)
        array.shift(zigzagindexes)
        array.shift(zigzagdir)
        add_to_array(value, index, dir)

zigzag(length)=>
    [dir, ph, pl] = pivots(length)
    dirchanged = ta.change(dir)
    if(not na(ph) or not na(pl))
        add_to_zigzag(dir, dirchanged, ph, pl, bar_index)

calculate_double_pattern()=>
    doubleTop = false
    doubleBottom = false
    if(array.size(zigzagvalues) >= 4) 
        index = array.get(zigzagindexes, 1)
        value = array.get(zigzagvalues, 1)
        highLow = array.get(zigzagdir, 1)
        
        lindex = array.get(zigzagindexes, 2)
        lvalue = array.get(zigzagvalues, 2)
        lhighLow = array.get(zigzagdir, 2)
        
        llindex = array.get(zigzagindexes, 3)
        llvalue = array.get(zigzagvalues, 3)
        llhighLow = array.get(zigzagdir, 3)
        risk = math.abs(value-llvalue)
        reward = math.abs(value-lvalue)
        riskPerReward = risk*100/(risk+reward)
        
        if(highLow == 1 and llhighLow == 2 and lhighLow < 0  and riskPerReward < MaxRiskPerReward)
            doubleTop := true
        if(highLow == -1 and llhighLow == -2 and lhighLow > 0 and riskPerReward < MaxRiskPerReward)
            doubleBottom := true

        if(doubleTop or doubleBottom)
            array.set(doubleTopBottomValues, 0, value)
            array.set(doubleTopBottomValues, 1, lvalue)
            array.set(doubleTopBottomValues, 2, llvalue)
            
            array.set(doubleTopBottomIndexes, 0, index)
            array.set(doubleTopBottomIndexes, 1, lindex)
            array.set(doubleTopBottomIndexes, 2, llindex)
            
            array.set(doubleTopBottomDir, 0, highLow)
            array.set(doubleTopBottomDir, 1, lhighLow)
            array.set(doubleTopBottomDir, 2, llhighLow)
    
    [doubleTop, doubleBottom]

// ==================
// Main Logic
// ==================

// Calculate EMA
emaValue = ta.ema(close, emaLength)
plot(emaValue, "EMA", color=color.blue, linewidth=2)

// OrderBlock Detection
var os = 0
var target_bull = 0.
var target_bear = 0.

upper = ta.highest(obLength)
lower = ta.lowest(obLength)

target_bull := ta.lowest(close, obLength)
target_bear := ta.highest(close, obLength)

os := high[obLength] > upper ? 0 : low[obLength] < lower ? 1 : os[1]

phv = ta.pivothigh(volume, obLength, obLength)

// Get bullish/bearish order blocks coordinates 
[bull_top, bull_btm, bull_avg, bull_left, bull_ob] = get_coordinates(not na(phv) and os == 1, hl2[obLength], low[obLength], low[obLength])
[bear_top, bear_btm, bear_avg, bear_left, bear_ob] = get_coordinates(not na(phv) and os == 0, high[obLength], hl2[obLength], high[obLength])

// Remove mitigated order blocks
mitigated_bull = remove_mitigated(bull_top, bull_btm, bull_left, bull_avg, target_bull, true)
mitigated_bear = remove_mitigated(bear_top, bear_btm, bear_left, bear_avg, target_bear, false)

// Display order blocks
set_order_blocks(bull_top, bull_btm, bull_left, bull_avg, bullExtLast, bgBullCss, bullCss, bullAvgCss)
set_order_blocks(bear_top, bear_btm, bear_left, bear_avg, bearExtLast, bgBearCss, bearCss, bearAvgCss)

// M-W Pattern Detection
zigzag(length)
[doubleTop, doubleBottom] = calculate_double_pattern()

// Draw M-W Pattern rectangles
if barstate.islast
    var table debugTable = table.new(position.top_right, 2, 3, bgcolor=color.new(color.black, 70))
    table.cell(debugTable, 0, 0, "Debug Info", bgcolor=color.gray, text_color=color.white)
    table.cell(debugTable, 0, 1, "Double Top: " + str.tostring(doubleTop), text_color=color.white)
    table.cell(debugTable, 0, 2, "Double Bottom: " + str.tostring(doubleBottom), text_color=color.white)

    if(doubleTop or doubleBottom)
        value = array.get(doubleTopBottomValues, 0)  // Current pivot
        lvalue = array.get(doubleTopBottomValues, 1) // Neck level
        llvalue = array.get(doubleTopBottomValues, 2) // Previous pivot
        index = array.get(doubleTopBottomIndexes, 0)
        lindex = array.get(doubleTopBottomIndexes, 1)
        
        if doubleTop
            box.new(index, value, bar_index, lvalue,
                 bgcolor=color.new(bearishColor, 70),
                 border_color=bearishColor,
                 extend=extend.right)
            label.new(index, value, "M Pattern\nRisk: " + str.tostring(math.round(math.abs(value-llvalue), 2)), 
                 color=color.new(bearishColor, 70),
                 textcolor=textColor,
                 style=label.style_label_down)
        else
            box.new(index, value, bar_index, lvalue,
                 bgcolor=color.new(bullishColor, 70),
                 border_color=bullishColor,
                 extend=extend.right)
            label.new(index, value, "W Pattern\nRisk: " + str.tostring(math.round(math.abs(value-llvalue), 2)), 
                 color=color.new(bullishColor, 70),
                 textcolor=textColor,
                 style=label.style_label_up)

    // Show zigzag if enabled
    if showZigzag and array.size(zigzagvalues) > 1
        for i = 0 to math.min(array.size(zigzagvalues)-2, 9)
            line.new(array.get(zigzagindexes, i), array.get(zigzagvalues, i),
                    array.get(zigzagindexes, i+1), array.get(zigzagvalues, i+1),
                    color=color.blue,
                    width=2)

// ==================
// Alerts
// ==================
alertcondition(doubleBottom, "W Pattern Detected", "W pattern formed")
alertcondition(doubleTop, "M Pattern Detected", "M pattern formed")
alertcondition(not na(bull_ob), "Bullish OB Detected", "Bullish OrderBlock formed")
alertcondition(not na(bear_ob), "Bearish OB Detected", "Bearish OrderBlock formed") 